/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory    
 * https://docs.python.org/2/extending/embedding.html#pure-embedding          * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 
#include "RooErrorHandler.h"
#include "RooMsgService.h"

#include "SciKitLearnWrapperNd.h" 
#include <math.h> 

#ifndef __CINT__
#include "Python.h"
#endif

ClassImp(SciKitLearnWrapperNd) 

  SciKitLearnWrapperNd::SciKitLearnWrapperNd(const char *name, const char *title, 
                       RooArgList& _features) :
  RooAbsReal(name,title), 
  features("features","features",this)
 { 

   _featureIter = features.createIterator() ;
  m_callback=NULL;

  TIterator* inputIter1 = _features.createIterator() ;
  RooAbsArg* comp ;
  while((comp = (RooAbsArg*)inputIter1->Next())) {
    if (!dynamic_cast<RooAbsReal*>(comp)) {
      coutE(InputArguments) << "SciKitLearnWrapperNd::ctor(" << GetName() << ") ERROR: component " << comp->GetName() 
                            << " in first list is not of type RooAbsReal" << endl ;
      RooErrorHandler::softAbort() ;
    }
    features.add(*comp) ;
  }
  delete inputIter1 ;

 } 


 SciKitLearnWrapperNd::SciKitLearnWrapperNd(const SciKitLearnWrapperNd& other, const char* name) :  
  RooAbsReal(other,name), 
  features("features",this,other.features),
  m_callback(other.m_callback) { 
   _featureIter = features.createIterator() ;

 } 

 SciKitLearnWrapperNd::SciKitLearnWrapperNd()
 { 
  // Default constructor
   _featureIter = NULL;
 } 


 Double_t SciKitLearnWrapperNd::evaluate() const 
 { 
  // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
  //std::cout << "Hi from C++!" << std::endl;
  #ifndef __CINT__
  //PyObject* result = PyObject_CallFunction( m_callback, blah);
  // cout << "result as long " << PyInt_AsLong(result) << endl;
  //cout << "result as double " << PyFloat_AsDouble(result) << endl; 

  //cout << "features.arg().getVal() = " << features.arg().getVal() << endl;
  //  features.Print("v");
  if(    m_callback==NULL) {
    cout << "no call back set" << endl;
    return 0;
  }


  double ret =0.;
  if(features.getSize()==2){
    TIterator* featureIter = features.createIterator();
    double first = ((RooAbsReal*)(featureIter->Next()))->getVal();
    double second = ((RooAbsReal*)(featureIter->Next()))->getVal();
    //PyObject* arg1 = PyFloat_FromDouble(((RooAbsReal*)(_featureIter->Next()))->getVal());
    //PyObject* arg2 = PyFloat_FromDouble(((RooAbsReal*)(_featureIter->Next()))->getVal());
    PyObject* arg1 = PyFloat_FromDouble(first);
    PyObject* arg2 = PyFloat_FromDouble(second);
    delete featureIter;
    //  PyObject* result = PyObject_CallObject( m_callback, arg   );
    PyObject* result = PyObject_CallFunctionObjArgs( m_callback, arg1, arg2 , NULL  );
    Py_XDECREF( arg1 );
    Py_XDECREF( arg2 ); 

    PyArg_Parse((result),"d", &ret);
    //cout << "from parse " << ret << endl; 

    Py_XDECREF( result );
    #endif
  } else {
    cout <<"only 2d implemented now" << endl;
  }
  return ret ; 
 } 

void SciKitLearnWrapperNd::RegisterCallBack( PyObject* pyobject )
{
	// see http://root.cern.ch/phpBB3/viewtopic.php?t=2606
	Py_INCREF( pyobject );
	m_callback = pyobject;
}


