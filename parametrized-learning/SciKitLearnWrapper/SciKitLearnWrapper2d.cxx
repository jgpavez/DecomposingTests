/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory    
 * https://docs.python.org/2/extending/embedding.html#pure-embedding          * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "SciKitLearnWrapper2d.h" 
#include <math.h> 

#ifndef __CINT__
#include "Python.h"
#endif

ClassImp(SciKitLearnWrapper2d) 

  SciKitLearnWrapper2d::SciKitLearnWrapper2d(const char *name, const char *title, 
                       RooAbsReal& _features, RooAbsReal& _params) :
  RooAbsReal(name,title), 
  features("features","features",this,_features),
  params("params","params",this, _params)
 { 
    m_callback=NULL;

 } 


 SciKitLearnWrapper2d::SciKitLearnWrapper2d(const SciKitLearnWrapper2d& other, const char* name) :  
  RooAbsReal(other,name), 
  features("features",this,other.features),
  params("params","params",this,other.params),
  m_callback(other.m_callback) { 
 } 



 Double_t SciKitLearnWrapper2d::evaluate() const 
 { 
  // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
  //std::cout << "Hi from C++!" << std::endl;
  #ifndef __CINT__
  //PyObject* result = PyObject_CallFunction( m_callback, blah);
  // cout << "result as long " << PyInt_AsLong(result) << endl;
  //cout << "result as double " << PyFloat_AsDouble(result) << endl; 

  //cout << "features.arg().getVal() = " << features.arg().getVal() << endl;
  if(    m_callback==NULL) {
    cout << "no call back set" << endl;
    return 0;
  }

  PyObject* arg1 = PyFloat_FromDouble(features.arg().getVal());
  PyObject* arg2 = PyFloat_FromDouble(params.arg().getVal());
//  PyObject* result = PyObject_CallObject( m_callback, arg   );
  PyObject* result = PyObject_CallFunctionObjArgs( m_callback, arg1, arg2 , NULL  );
  Py_XDECREF( arg1 );
  Py_XDECREF( arg2 );

  double ret;
  PyArg_Parse((result),"d", &ret);
  //cout << "from parse " << ret << endl;

  Py_XDECREF( result );
  #endif
  return ret ; 
 } 

void SciKitLearnWrapper2d::RegisterCallBack( PyObject* pyobject )
{
	// see http://root.cern.ch/phpBB3/viewtopic.php?t=2606
	Py_INCREF( pyobject );
	m_callback = pyobject;
}


