/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
  * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

#ifndef COMPOSITEFUNCTIONPDF
#define COMPOSITEFUNCTIONPDF

#include "RooAbsPdf.h"
#include "RooRealProxy.h"
#include "RooCategoryProxy.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
 
class CompositeFunctionPdf : public RooAbsPdf {
public:
  CompositeFunctionPdf() {} ; 
  CompositeFunctionPdf(const char *name, const char *title,
	      RooAbsReal& _x);
  CompositeFunctionPdf(const CompositeFunctionPdf& other, const char* name=0) ;
  virtual TObject* clone(const char* newname) const { return new CompositeFunctionPdf(*this,newname); }
  inline virtual ~CompositeFunctionPdf() { }

  virtual Bool_t forceAnalyticalInt(const RooAbsArg&) const { return kTRUE ; }
  Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName=0) const ;
  Double_t analyticalIntegral(Int_t code, const char* rangeName=0) const ;


  // adding this for special case
  virtual Bool_t selfNormalized() const { 
    // P.d.f is self normalized
    return kTRUE ; 
  }

protected:

  RooRealProxy x ;
  
  Double_t evaluate() const ;

private:

  ClassDef(CompositeFunctionPdf,1) // Your description goes here...
};
 
#endif
